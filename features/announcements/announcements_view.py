
from flask import Blueprint, render_template, request, flash

from features.announcements.announcements_repository import create_announcement, get_announcements_by_team_id_paginated
from features.users.role import Role
from libs.auth.pre_authorize import pre_authorize
from libs.auth.require_auth import require_auth
from libs.auth.team_required import team_required
from libs.auth.use_team import use_team
from libs.context.user_context import get_user_profile, get_active_team_id
from libs.logging.logging import logger
from libs.security.rate_limit import limiter

announcement_bp = Blueprint('announcement', __name__)
limiter.limit("120/minute")(announcement_bp)

@announcement_bp.route('/list', methods=['GET'])
@require_auth
@team_required
def list_announcements():
    return render_template("announcements/list-announcements.html")

@announcement_bp.route('/create', methods=['GET', 'POST'])
@require_auth
@pre_authorize([Role.ADMIN, Role.COACH])
@team_required
def add_announcement():
    if request.method == 'POST':
        try:
            message = request.form['message']
            if not message:
                return {"error": "Message is required"}, 400
            title = request.form['title']
            if not title:
                return {"error": "Title is required"}, 400
            team_id = get_active_team_id()
            user_profile = get_user_profile()
            author = user_profile.user.username
            # date is generated by the repo layer

            announcement = create_announcement(
                author=author,
                message=message,
                team_id=team_id,
                title=title
            )
            return {"message": "Announcement created successfully"}, 200
        except Exception as e:
            logger.error(f"Failed to create announcement: {e}")
            return {"error": "Failed to create announcement"}, 500

@announcement_bp.route('/team', methods=['GET'])
@require_auth
@use_team
def get_team_announcements():
    try:
        team_id = get_active_team_id()
        last_item = 0
        if team_id is not None:
            page = request.args.get('page', 1, type=int)
            page_size = request.args.get('size', 10, type=int)

            # Validate page and size parameters
            if page < 1:
                page = 1
            if page_size < 1 or page_size > 50:  # Limiting max page size to 50
                page_size = 10

            result = get_announcements_by_team_id_paginated(
                team_id=team_id,
                page=page,
                page_size=page_size
            )
            last_item = min(page * page_size, result["total"])
        else:
            result = {"announcements": [], "total": 0, "page": 1, "pageSize": 10, "totalPages": 1}
        return render_template(
                "announcements/announcements-page.html",
                announcements=result["announcements"],
                total=result["total"],
                page=result["page"],
                page_size=result["pageSize"],
                total_pages=result["totalPages"],
                last_item=last_item
            )

    except Exception as e:
        logger.error(f"Failed to fetch team announcements: {e}")
        flash("There was an issue retrieving the announcements.")
        return render_template('error/error.html')